/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/user.js":
/*!************************************!*\
  !*** ./resources/js/pages/user.js ***!
  \************************************/
/***/ (() => {

eval("$(function () {\n  $.ajaxSetup({\n    headers: {\n      \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"').attr(\"content\")\n    }\n  });\n\n  $.fn.modal.Constructor.prototype._enforceFocus = function () {};\n\n  var columnsTable = [{\n    data: \"no\"\n  }, {\n    data: \"foto\"\n  }, {\n    data: \"name\"\n  }, {\n    data: \"email\"\n  }, {\n    data: \"username\"\n  }, {\n    data: \"role\"\n  }, {\n    data: \"created_at\"\n  }, {\n    data: \"action\"\n  }];\n  var tableUser = $(\"#table-user\").DataTable({\n    // \"searching\": false,\n    order: [[0, \"DESC\"]],\n    processing: true,\n    serverSide: true,\n    ajax: {\n      url: base_url + \"/user/datatable\",\n      dataType: \"json\",\n      type: \"POST\",\n      data: function data(dataFilter) {\n        var columnsFilter = $(\"#columnsFilter\").val();\n        var filterVal = $(\"#filterVal\").val();\n        var jenis_data = $(\"#jenis_data\").val();\n        dataFilter.columnsFilter = columnsFilter;\n        dataFilter.filterVal = filterVal;\n        dataFilter.jenis_data = jenis_data;\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        if (jqXHR.responseJSON.data) {\n          var error = jqXHR.responseJSON.data.error;\n          Swal.fire({\n            icon: \"error\",\n            title: \" <br>Copy error dan hubungi Programmer!\",\n            html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<p>Error Message: <strong>\" + error + \"</strong></p>\" + \"</div>\",\n            allowOutsideClick: false,\n            showConfirmButton: true\n          }).then(function () {\n            refreshTable();\n          });\n        } else {\n          var message = jqXHR.responseJSON.message;\n          var errorLine = jqXHR.responseJSON.line;\n          var file = jqXHR.responseJSON.file;\n          Swal.fire({\n            icon: \"error\",\n            title: \" <br>Copy error dan hubungi Programmer!\",\n            html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<p>Error Message: <strong>\" + message + \"</strong></p>\" + \"<p>File: \" + file + \"</p>\" + \"<p>Line: \" + errorLine + \"</p>\" + \"</div>\",\n            allowOutsideClick: false,\n            showConfirmButton: true\n          }).then(function () {\n            refreshTable();\n          });\n        }\n      }\n    },\n    columns: columnsTable,\n    columnDefs: [{\n      orderable: false,\n      targets: [0, 1, -1]\n    }]\n  });\n  $(\"#table-user_filter input\").off();\n  $(\"#table-user_filter input\").on(\"keyup\", function (e) {\n    if (e.code == \"Enter\") {\n      tableUser.search(this.value).draw();\n    }\n  });\n\n  function refreshTable() {\n    tableUser.search(\"\").draw();\n  }\n\n  var btnReloadUser = document.getElementById(\"btn-userReload\");\n\n  if (btnReloadUser) {\n    btnReloadUser.addEventListener(\"click\", function () {\n      refreshTable();\n    });\n  }\n  /** ./end datatable */\n\n\n  $(\"#inputFoto\").on(\"change\", function () {\n    var review = \"imageReview\";\n    var linkFoto = \"linkFoto\";\n    readURL(this, review, linkFoto);\n  });\n\n  function readURL(input, review, linkFoto) {\n    if (input.files && input.files[0]) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        $(\"#\" + review).attr(\"src\", e.target.result);\n        $(\"#\" + linkFoto).attr(\"href\", e.target.result);\n        $(input).next(\".custom-file-label\").html(input.files[0].name);\n      };\n\n      reader.readAsDataURL(input.files[0]); // convert to base64 string\n    }\n  }\n\n  function formReset() {\n    $(\"#formUser\")[0].reset();\n    $(\"#formUser\").attr(\"action\", base_url + \"/user\");\n    $(\"#role\").val(\"\").trigger(\"change\");\n    $('[name=\"_method\"]').remove();\n    $(\"#imageReview\").attr(\"src\", base_url + \"/images/no-image.png\");\n    $(\"#linkFoto\").attr(\"href\", base_url + \"/images/no-image.png\");\n    $(\"#modalFormInputLabel\").html('<i class=\"fas fa-user-plus\"></i>&nbsp; Add User');\n  }\n\n  $(\".openForm\").on(\"click\", function () {\n    openForm();\n  });\n  $(\".closeForm\").on(\"click\", function () {\n    closeForm();\n  });\n\n  function openForm() {\n    $(\"#modalFormInput\").modal({\n      show: true,\n      backdrop: \"static\",\n      keyboard: false // to prevent closing with Esc button (if you want this too)\n\n    });\n  }\n\n  function closeForm() {\n    $(\"#modalFormInput\").modal(\"hide\");\n    formReset();\n  }\n\n  $(\"#role\").select2({\n    theme: \"bootstrap4\",\n    placeholder: \"Select Role\",\n    allowClear: true\n  });\n  $(\"#formUser\").on(\"submit\", function (e) {\n    e.preventDefault();\n    Swal.fire({\n      imageUrl: base_url + \"/images/loading.gif\",\n      imageHeight: 300,\n      showConfirmButton: false,\n      title: \"Loading ...\",\n      allowOutsideClick: false\n    });\n    var formData = new FormData($(\"#formUser\")[0]);\n    var url = $(\"#formUser\").attr(\"action\");\n    $.ajax({\n      url: url,\n      type: \"POST\",\n      data: formData,\n      contentType: false,\n      processData: false,\n      dataType: \"JSON\",\n      success: function success(data) {\n        Swal.fire({\n          icon: \"success\",\n          title: data.meta.message,\n          showConfirmButton: false,\n          timer: 2000,\n          allowOutsideClick: false\n        }).then(function () {\n          var dataUser = data.data.user;\n          var self = data.data.self;\n\n          if (self == true) {\n            $(\"#userImageSide\").attr(\"src\", base_url + \"/storage/\" + dataUser.foto);\n            $(\"#userNameSide\").html(dataUser.name);\n          }\n\n          refreshTable();\n          closeForm();\n        });\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        if (jqXHR.responseJSON.data.errorValidator) {\n          var errors = jqXHR.responseJSON.data.errorValidator;\n          var message = jqXHR.responseJSON.message;\n          var li = \"\";\n          $.each(errors, function (key, value) {\n            li += \"<li>\" + value + \"</li>\";\n          });\n          Swal.fire({\n            icon: \"error\",\n            title: message,\n            html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<ul>\" + li + \"</ul>\" + \"</div>\",\n            footer: \"Pastikan data yang anda masukkan sudah benar!\",\n            allowOutsideClick: false,\n            showConfirmButton: true\n          });\n        } else {\n          var message = jqXHR.responseJSON.meta.message;\n          var data = jqXHR.responseJSON.data;\n          Swal.fire({\n            icon: \"error\",\n            title: message + \" <br>Copy error dan hubungi Programmer!\",\n            html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<p>Error Message: <strong>\" + message + \"</strong></p>\" + \"<p>Error: \" + data.error + \"</p>\" + \"</div>\",\n            allowOutsideClick: false,\n            showConfirmButton: true\n          });\n        }\n      }\n    });\n  });\n  /** Proses edit */\n\n  $(\"#table-user\").on(\"click\", \".btn-edit\", function () {\n    Swal.fire({\n      imageUrl: base_url + \"/images/loading.gif\",\n      imageHeight: 300,\n      showConfirmButton: false,\n      title: \"Loading ...\",\n      allowOutsideClick: false\n    });\n    var idUser = $(this).data(\"id\");\n    var urlEdit = base_url + \"/user/\" + idUser + \"/edit\";\n    $.ajax({\n      url: urlEdit,\n      type: \"get\",\n      success: function success(x) {\n        var dataUser = x.data.user;\n        $(\"#formUser\").attr(\"action\", x.data.action);\n        $('<input name=\"_method\" value=\"patch\">').attr(\"type\", \"hidden\").appendTo(\"#formUser\");\n        $(\"#modalFormInputLabel\").html('<i class=\"fas fa-edit\"></i>&nbsp; Edit User');\n        $(\"#imageReview\").attr(\"src\", dataUser.foto);\n        $(\"#linkFoto\").attr(\"href\", dataUser.foto);\n        $('[name=\"nama\"]').val(dataUser.name);\n        $('[name=\"username\"]').val(dataUser.username);\n        $('[name=\"email\"]').val(dataUser.email);\n        $(\"#role\").val(dataUser.role).trigger(\"change\");\n        openForm();\n        Swal.close();\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        var meta = jqXHR.responseJSON.meta;\n        var data = jqXHR.responseJSON.data;\n        Swal.fire({\n          icon: \"error\",\n          title: meta.message,\n          html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<p>\" + data.error + \"</p>\" + \"</div>\",\n          allowOutsideClick: false\n        });\n      }\n    });\n  });\n  /** delete user */\n\n  $(\"#table-user\").on(\"click\", \".btn-delete\", function () {\n    var _this = this;\n\n    closeForm();\n    Swal.fire({\n      title: \"Anda yakin?\",\n      text: \"Anda yakin ingin menghapus data?\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n      allowOutsideClick: false\n    }).then(function (result) {\n      if (result.value) {\n        Swal.fire({\n          imageUrl: base_url + \"/images/loading.gif\",\n          imageHeight: 300,\n          showConfirmButton: false,\n          title: \"Loading ...\",\n          allowOutsideClick: false\n        });\n        var idUser = $(_this).data(\"id\");\n        var urlDelete = base_url + \"/user/\" + idUser + \"/delete\";\n        $.ajax({\n          url: urlDelete,\n          type: \"DELETE\",\n          contentType: false,\n          processData: false,\n          success: function success(data) {\n            Swal.fire({\n              icon: \"success\",\n              title: data.data.message,\n              showConfirmButton: false,\n              timer: 2000,\n              allowOutsideClick: false\n            }).then(function () {\n              refreshTable();\n            });\n          },\n          error: function error(jqXHR, textStatus, errorThrown) {\n            var error = jqXHR.responseJSON;\n\n            if (error.meta) {\n              var message = error.meta.message;\n            } else {\n              var message = error.message;\n            }\n\n            Swal.fire({\n              icon: \"error\",\n              title: message,\n              showConfirmButton: false,\n              timer: 2000,\n              allowOutsideClick: false\n            });\n          }\n        });\n      }\n    });\n  });\n}); // ./end document//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/user.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/user.js"]();
/******/ 	
/******/ })()
;