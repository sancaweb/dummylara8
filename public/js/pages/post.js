/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/post.js":
/*!************************************!*\
  !*** ./resources/js/pages/post.js ***!
  \************************************/
/***/ (() => {

eval("$(function () {\n  $.ajaxSetup({\n    headers: {\n      \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"').attr(\"content\")\n    }\n  });\n\n  $.fn.modal.Constructor.prototype._enforceFocus = function () {};\n\n  var columnsTable = [{\n    data: \"no\"\n  }, {\n    data: \"title\"\n  }, {\n    data: \"post_created_by\"\n  }, {\n    data: \"category_name\"\n  }, {\n    data: \"tags\"\n  }, {\n    data: \"published_date\"\n  }, {\n    data: \"status\"\n  }, {\n    data: \"action\"\n  }];\n  var tablePosts = $(\"#table-posts\").DataTable({\n    // \"searching\": false,\n    order: [[0, \"DESC\"]],\n    processing: true,\n    serverSide: true,\n    ajax: {\n      url: base_url + \"/post/datatable\",\n      dataType: \"json\",\n      type: \"POST\",\n      data: function data(dataFilter) {// var tglFilter = $(\"#tglFilterField\").val();\n        // var noSoFilter = $(\"#noSoFilter\").val();\n        // var noLoFilter = $(\"#noLoFilter\").val();\n        // var bbmIdFilter = $(\"#bbmIdFilter\").val();\n        // var driverFilter = $(\"#driverFilter\").val();\n        // var noPolFilter = $(\"#noPolFilter\").val();\n        // dataFilter.tglFilter = tglFilter;\n        // dataFilter.noSoFilter = noSoFilter;\n        // dataFilter.noLoFilter = noLoFilter;\n        // dataFilter.bbmIdFilter = bbmIdFilter;\n        // dataFilter.driverFilter = driverFilter;\n        // dataFilter.noPolFilter = noPolFilter;\n      }\n    },\n    error: function error(jqXHR, textStatus, errorThrown) {\n      if (jqXHR.responseJSON.data) {\n        var error = jqXHR.responseJSON.data.error;\n        Swal.fire({\n          icon: \"error\",\n          title: \" <br>Copy error dan hubungi Programmer!\",\n          html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<p>Error Message: <strong>\" + error + \"</strong></p>\" + \"</div>\",\n          allowOutsideClick: false,\n          showConfirmButton: true\n        }).then(function () {\n          refreshTable();\n        });\n      } else {\n        var message = jqXHR.responseJSON.message;\n        var errorLine = jqXHR.responseJSON.line;\n        var file = jqXHR.responseJSON.file;\n        Swal.fire({\n          icon: \"error\",\n          title: \" <br>Copy error dan hubungi Programmer!\",\n          html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<p>Error Message: <strong>\" + message + \"</strong></p>\" + \"<p>File: \" + file + \"</p>\" + \"<p>Line: \" + errorLine + \"</p>\" + \"</div>\",\n          allowOutsideClick: false,\n          showConfirmButton: true\n        }).then(function () {\n          refreshTable();\n        });\n      }\n    },\n    columns: columnsTable,\n    columnDefs: [{\n      orderable: false,\n      targets: [0, 1, -1, -4]\n    }, {\n      targets: [-1],\n      createdCell: function createdCell(td, cellData, rowData, row, col) {\n        $(td).addClass(\"text-center\");\n      }\n    }]\n  });\n  $(\"#table-posts_filter input\").off();\n  $(\"#table-posts_filter input\").on(\"keyup\", function (e) {\n    if (e.code == \"Enter\") {\n      tablePosts.search(this.value).draw();\n    }\n  });\n\n  function refreshTable() {\n    tablePosts.search(\"\").draw();\n  }\n\n  var btnPostReload = document.getElementById(\"btn-postReload\");\n\n  if (btnPostReload) {\n    btnPostReload.addEventListener(\"click\", function () {\n      refreshTable();\n    });\n  }\n  /** ./end datatable */\n\n\n  tinymce.init({\n    height: \"1000\",\n    selector: \"textarea#content\",\n    // Replace this CSS selector to match the placeholder element for TinyMCE\n    plugins: \"advlist code table lists autolink link image charmap preview anchor pagebreak searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking save table directionality emoticons template\",\n    toolbar: \"undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | \" + \"bullist numlist outdent indent | link image | print preview media fullscreen | \" + \"forecolor backcolor emoticons | help\",\n    file_picker_callback: function file_picker_callback(callback, value, meta) {\n      var x = window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName(\"body\")[0].clientWidth;\n      var y = window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName(\"body\")[0].clientHeight;\n      var cmsURL = \"/filemanager?editor=\" + meta.fieldname;\n\n      if (meta.filetype == \"image\") {\n        cmsURL = cmsURL + \"&type=Images\";\n      } else {\n        cmsURL = cmsURL + \"&type=Files\";\n      }\n\n      tinyMCE.activeEditor.windowManager.openUrl({\n        url: cmsURL,\n        title: \"Filemanager\",\n        width: x * 0.8,\n        height: y * 0.8,\n        resizable: \"yes\",\n        close_previous: \"no\",\n        onMessage: function onMessage(api, message) {\n          callback(message.content);\n        }\n      });\n    }\n  });\n  $(\"#categories\").select2({\n    theme: \"bootstrap4\",\n    placeholder: \"Select Category\",\n    allowClear: true\n  });\n  $(\"#tags\").select2({\n    theme: \"bootstrap4\",\n    // placeholder: \"Tags\",\n    minimumInputLength: 3,\n    multiple: true,\n    allowClear: true,\n    tags: true,\n    ajax: {\n      url: base_url + \"/ajax/post/tags\",\n      dataType: \"json\",\n      quietMillis: 100,\n      data: function data(params) {\n        return {\n          search: params.term\n        };\n      },\n      processResults: function processResults(data, params) {\n        return {\n          results: data\n        };\n      }\n    }\n  }).on(\"select2:select\", function (res) {});\n  $(\"#inputFoto\").filemanager(\"image\");\n  $(\"#published_date\").datetimepicker({\n    minDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n    sideBySide: true,\n    icons: {\n      time: \"far fa-clock\",\n      date: \"far fa-calendar-alt\"\n    },\n    format: \"DD-MM-YYYY HH:mm:ss\",\n    useCurrent: false\n  });\n  $(\"#formPost\").on(\"submit\", function (e) {\n    e.preventDefault();\n    Swal.fire({\n      imageUrl: base_url + \"/images/loading.gif\",\n      imageHeight: 300,\n      showConfirmButton: false,\n      title: \"Loading ...\",\n      allowOutsideClick: false\n    });\n    var formData = new FormData($(\"#formPost\")[0]);\n    var url = $(\"#formPost\").attr(\"action\");\n    $.ajax({\n      url: url,\n      type: \"POST\",\n      data: formData,\n      contentType: false,\n      processData: false,\n      dataType: \"JSON\",\n      success: function success(data) {\n        Swal.fire({\n          icon: \"success\",\n          title: data.meta.message,\n          showConfirmButton: false,\n          timer: 2000,\n          allowOutsideClick: false\n        }).then(function () {\n          window.location.replace(\"/post\");\n        });\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        if (jqXHR.responseJSON.data.errorValidator) {\n          var errors = jqXHR.responseJSON.data.errorValidator;\n          var message = jqXHR.responseJSON.message;\n          var li = \"\";\n          $.each(errors, function (key, value) {\n            li += \"<li>\" + value + \"</li>\";\n          });\n          Swal.fire({\n            icon: \"error\",\n            title: message,\n            html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<ul>\" + li + \"</ul>\" + \"</div>\",\n            footer: \"Pastikan data yang anda masukkan sudah benar!\",\n            allowOutsideClick: false,\n            showConfirmButton: true\n          });\n        } else {\n          var message = jqXHR.responseJSON.meta.message;\n          var data = jqXHR.responseJSON.data;\n          Swal.fire({\n            icon: \"error\",\n            title: message + \" <br>Copy error dan hubungi Programmer!\",\n            html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<p>Error Message: <strong>\" + message + \"</strong></p>\" + \"<p>Error: \" + data.error + \"</p>\" + \"</div>\",\n            allowOutsideClick: false,\n            showConfirmButton: true\n          });\n        }\n      }\n    });\n  }); //rubah status\n\n  $(\"#table-posts\").on(\"click\", \".btnStatus\", function () {\n    var _this = this;\n\n    var title = $(this).data(\"title\");\n    Swal.fire({\n      title: \"Anda yakin?\",\n      text: \"Anda yakin ingin merubah Post dengan judul: \" + title + \"?\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, change!\",\n      allowOutsideClick: false\n    }).then(function (result) {\n      if (result.value) {\n        Swal.fire({\n          imageUrl: base_url + \"/images/loading.gif\",\n          imageHeight: 300,\n          showConfirmButton: false,\n          title: \"Loading ...\",\n          allowOutsideClick: false\n        });\n        var idPost = $(_this).data(\"id\");\n        var status = $(_this).data(\"status\");\n        $.ajax({\n          url: base_url + \"/ajax/post/status\",\n          type: \"POST\",\n          data: {\n            idPost: idPost,\n            status: status,\n            _method: \"patch\"\n          },\n          // contentType: false,\n          // processData: false,\n          dataType: \"JSON\",\n          success: function success(data) {\n            Swal.fire({\n              icon: \"success\",\n              title: data.meta.message,\n              showConfirmButton: false,\n              timer: 2000,\n              allowOutsideClick: false\n            }).then(function () {\n              Swal.close();\n              refreshTable();\n            });\n          },\n          error: function error(jqXHR, textStatus, errorThrown) {\n            if (jqXHR.responseJSON.data) {\n              var message = jqXHR.responseJSON.meta.message;\n              var data = jqXHR.responseJSON.data;\n              Swal.fire({\n                icon: \"error\",\n                title: message + \" <br>Copy error dan hubungi Programmer!\",\n                html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<p>Error Message: <strong>\" + data.message + \"</strong></p>\" + \"<p>Error: \" + data.error.errorInfo + \"</p>\" + \"</div>\",\n                allowOutsideClick: false\n              });\n            } else {\n              var errors = jqXHR.responseJSON.errors;\n              var message = jqXHR.responseJSON.message;\n              var li = \"\";\n              $.each(errors, function (key, value) {\n                li += \"<li>\" + value + \"</li>\";\n              });\n              Swal.fire({\n                icon: \"error\",\n                title: message,\n                html: '<div class=\"alert alert-danger text-left\" role=\"alert\">' + \"<ul>\" + li + \"</ul>\" + \"</div>\",\n                footer: \"Pastikan data yang anda masukkan sudah benar!\",\n                allowOutsideClick: false\n              });\n            }\n          }\n        });\n      }\n    });\n  }); //./end rubah status\n\n  /**\n   * DELETE POST\n   */\n\n  $(\"#table-posts\").on(\"click\", \".btn-delete\", function () {\n    var _this2 = this;\n\n    var title = $(this).data(\"title\");\n    Swal.fire({\n      title: \"Anda yakin?\",\n      text: \"Anda yakin ingin merubah Post dengan judul: \" + title + \"?\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n      allowOutsideClick: false\n    }).then(function (result) {\n      if (result.value) {\n        Swal.fire({\n          imageUrl: base_url + \"/images/loading.gif\",\n          imageHeight: 300,\n          showConfirmButton: false,\n          title: \"Loading ...\",\n          allowOutsideClick: false\n        });\n        var idPost = $(_this2).data(\"id\");\n        var urlDelete = base_url + \"/post/\" + idPost + \"/delete\";\n        $.ajax({\n          url: urlDelete,\n          type: \"DELETE\",\n          contentType: false,\n          processData: false,\n          success: function success(data) {\n            Swal.fire({\n              icon: \"success\",\n              title: data.data.message,\n              showConfirmButton: false,\n              timer: 2000,\n              allowOutsideClick: false\n            }).then(function () {\n              refreshTable();\n            });\n          },\n          error: function error(jqXHR, textStatus, errorThrown) {\n            var error = jqXHR.responseJSON;\n\n            if (error.meta) {\n              var message = error.meta.message;\n            } else {\n              var message = error.message;\n            }\n\n            Swal.fire({\n              icon: \"error\",\n              title: message,\n              showConfirmButton: false,\n              timer: 2000,\n              allowOutsideClick: false\n            });\n          }\n        });\n      }\n    });\n  });\n  /**\n   * BATAS EDITING ====\n   */\n  // $(\"#inputFoto\").on(\"change\", function () {\n  //     var review = \"imageReview\";\n  //     var linkFoto = \"linkFoto\";\n  //     readURL(this, review, linkFoto);\n  // });\n  // function readURL(input, review, linkFoto) {\n  //     if (input.files && input.files[0]) {\n  //         var reader = new FileReader();\n  //         reader.onload = function (e) {\n  //             $(\"#\" + review).attr(\"src\", e.target.result);\n  //             $(\"#\" + linkFoto).attr(\"href\", e.target.result);\n  //         };\n  //         reader.readAsDataURL(input.files[0]); // convert to base64 string\n  //     }\n  // }\n  // function formReset() {\n  //     $(\"#formPost\")[0].reset();\n  //     $(\"#formPost\").attr(\"action\", base_url + \"/user\");\n  //     $(\"#role\").val(\"\").trigger(\"change\");\n  //     $('[name=\"_method\"]').remove();\n  //     $(\"#imageReview\").attr(\"src\", base_url + \"/images/no-image.png\");\n  //     $(\"#linkFoto\").attr(\"href\", base_url + \"/images/no-image.png\");\n  //     $(\"#modalFormInputLabel\").html(\n  //         '<i class=\"fas fa-user-plus\"></i>&nbsp; Add User'\n  //     );\n  // }\n  // $(\".openForm\").on(\"click\", function () {\n  //     openForm();\n  // });\n  // $(\".closeForm\").on(\"click\", function () {\n  //     closeForm();\n  // });\n  // function openForm() {\n  //     $(\"#modalFormInput\").modal({\n  //         show: true,\n  //         backdrop: \"static\",\n  //         keyboard: false, // to prevent closing with Esc button (if you want this too)\n  //     });\n  // }\n  // function closeForm() {\n  //     $(\"#modalFormInput\").modal(\"hide\");\n  //     formReset();\n  // }\n  // $(\"#role\").select2({\n  //     theme: \"bootstrap4\",\n  //     placeholder: \"Select Role\",\n  //     allowClear: true,\n  // });\n  // $(\"#formPost\").on(\"submit\", function (e) {\n  //     e.preventDefault();\n  //     Swal.fire({\n  //         imageUrl: base_url + \"/images/loading.gif\",\n  //         imageHeight: 300,\n  //         showConfirmButton: false,\n  //         title: \"Loading ...\",\n  //         allowOutsideClick: false,\n  //     });\n  //     var formData = new FormData($(\"#formPost\")[0]);\n  //     var url = $(\"#formPost\").attr(\"action\");\n  //     $.ajax({\n  //         url: url,\n  //         type: \"POST\",\n  //         data: formData,\n  //         contentType: false,\n  //         processData: false,\n  //         dataType: \"JSON\",\n  //         success: function (data) {\n  //             Swal.fire({\n  //                 icon: \"success\",\n  //                 title: data.meta.message,\n  //                 showConfirmButton: false,\n  //                 timer: 2000,\n  //                 allowOutsideClick: false,\n  //             }).then(function () {\n  //                 var dataUser = data.data.user;\n  //                 var self = data.data.self;\n  //                 if (self == true) {\n  //                     $(\"#userImageSide\").attr(\n  //                         \"src\",\n  //                         base_url + \"/storage/\" + dataUser.foto\n  //                     );\n  //                     $(\"#userNameSide\").html(dataUser.name);\n  //                 }\n  //                 refreshTable();\n  //                 closeForm();\n  //             });\n  //         },\n  //         error: function (jqXHR, textStatus, errorThrown) {\n  //             if (jqXHR.responseJSON.data.errorValidator) {\n  //                 var errors = jqXHR.responseJSON.data.errorValidator;\n  //                 var message = jqXHR.responseJSON.message;\n  //                 var li = \"\";\n  //                 $.each(errors, function (key, value) {\n  //                     li += \"<li>\" + value + \"</li>\";\n  //                 });\n  //                 Swal.fire({\n  //                     icon: \"error\",\n  //                     title: message,\n  //                     html:\n  //                         '<div class=\"alert alert-danger text-left\" role=\"alert\">' +\n  //                         \"<ul>\" +\n  //                         li +\n  //                         \"</ul>\" +\n  //                         \"</div>\",\n  //                     footer: \"Pastikan data yang anda masukkan sudah benar!\",\n  //                     allowOutsideClick: false,\n  //                     showConfirmButton: true,\n  //                 });\n  //             } else {\n  //                 var message = jqXHR.responseJSON.meta.message;\n  //                 var data = jqXHR.responseJSON.data;\n  //                 Swal.fire({\n  //                     icon: \"error\",\n  //                     title:\n  //                         message + \" <br>Copy error dan hubungi Programmer!\",\n  //                     html:\n  //                         '<div class=\"alert alert-danger text-left\" role=\"alert\">' +\n  //                         \"<p>Error Message: <strong>\" +\n  //                         message +\n  //                         \"</strong></p>\" +\n  //                         \"<p>Error: \" +\n  //                         data.error +\n  //                         \"</p>\" +\n  //                         \"</div>\",\n  //                     allowOutsideClick: false,\n  //                     showConfirmButton: true,\n  //                 });\n  //             }\n  //         },\n  //     });\n  // });\n  // /** Proses edit */\n  // $(\"#table-posts\").on(\"click\", \".btn-edit\", function () {\n  //     Swal.fire({\n  //         imageUrl: base_url + \"/images/loading.gif\",\n  //         imageHeight: 300,\n  //         showConfirmButton: false,\n  //         title: \"Loading ...\",\n  //         allowOutsideClick: false,\n  //     });\n  //     var idUser = $(this).data(\"id\");\n  //     var urlEdit = base_url + \"/user/\" + idUser + \"/edit\";\n  //     $.ajax({\n  //         url: urlEdit,\n  //         type: \"get\",\n  //         success: function (x) {\n  //             var dataUser = x.data.user;\n  //             $(\"#formPost\").attr(\"action\", x.data.action);\n  //             $('<input name=\"_method\" value=\"patch\">')\n  //                 .attr(\"type\", \"hidden\")\n  //                 .appendTo(\"#formPost\");\n  //             $(\"#modalFormInputLabel\").html(\n  //                 '<i class=\"fas fa-edit\"></i>&nbsp; Edit User'\n  //             );\n  //             $(\"#imageReview\").attr(\"src\", dataUser.foto);\n  //             $(\"#linkFoto\").attr(\"href\", dataUser.foto);\n  //             $('[name=\"nama\"]').val(dataUser.name);\n  //             $('[name=\"username\"]').val(dataUser.username);\n  //             $('[name=\"email\"]').val(dataUser.email);\n  //             $(\"#role\").val(dataUser.role).trigger(\"change\");\n  //             openForm();\n  //             Swal.close();\n  //         },\n  //         error: function (jqXHR, textStatus, errorThrown) {\n  //             var meta = jqXHR.responseJSON.meta;\n  //             var data = jqXHR.responseJSON.data;\n  //             Swal.fire({\n  //                 icon: \"error\",\n  //                 title: meta.message,\n  //                 html:\n  //                     '<div class=\"alert alert-danger text-left\" role=\"alert\">' +\n  //                     \"<p>\" +\n  //                     data.error +\n  //                     \"</p>\" +\n  //                     \"</div>\",\n  //                 allowOutsideClick: false,\n  //             });\n  //         },\n  //     });\n  // });\n  // /** delete user */\n}); // ./end document//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/post.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/post.js"]();
/******/ 	
/******/ })()
;